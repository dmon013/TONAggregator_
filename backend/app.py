# backend/app.py (–°–ê–ú–ê–Ø –ü–û–°–õ–ï–î–ù–Ø–Ø –í–ï–†–°–ò–Ø –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú –†–ï–ö–£–†–°–ò–ò)

from dotenv import load_dotenv
load_dotenv() 

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º request –∏–∑ Flask —Å –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º 'flask_request'
from flask import Flask, jsonify, request as flask_request
from flask_cors import CORS
import requests # –ê —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
import json
import os
import traceback
import uuid
import datetime

# --- –°–µ—Ä–≤–∏—Å—ã –∏ —Ä–æ—É—Ç—ã ---
from firebase_service import db
from routes.api_apps import api_apps_bp
from routes.api_news import api_news_bp
from routes.api_user import api_user_bp
from routes.api_admin import api_admin_bp
from routes.api_search import api_search_bp

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = Flask(__name__)
CORS(app, expose_headers=["X-Telegram-Init-Data"])

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Blueprints ---
# (—É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å–µ —Ç–≤–æ–∏ app.register_blueprint(...) –∑–¥–µ—Å—å)
app.register_blueprint(api_apps_bp, url_prefix='/api')
app.register_blueprint(api_news_bp, url_prefix='/api')
app.register_blueprint(api_user_bp, url_prefix='/api')
app.register_blueprint(api_admin_bp, url_prefix='/admin')
app.register_blueprint(api_search_bp, url_prefix='/api')

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Webhook ---
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL')

@app.route('/webhook', methods=['POST'])
def webhook():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è flask_request, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    update = flask_request.get_json()
    if "message" in update and "chat" in update["message"] and "id" in update["message"]["chat"]:
        chat_id = update["message"]["chat"]["id"]
        message_text = update["message"].get("text", "")
        if message_text == "/start":
            send_welcome_message(chat_id)
    return jsonify({"status": "ok"}), 200

def send_welcome_message(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App."""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    if not WEB_APP_URL:
        print("‚ùå WEB_APP_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return
    web_app_button = {"text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä", "web_app": {"url": WEB_APP_URL}}
    reply_markup = {"inline_keyboard": [[web_app_button]]}
    payload = {"chat_id": chat_id, "text": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", "reply_markup": json.dumps(reply_markup)}
    try:
        api_response = requests.post(url, data=payload)
        api_response.raise_for_status()
        print(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@app.route('/')
def index():
    return jsonify({"status": "ok", "message": "TONAggregator backend is running!"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001, debug=True)